function [outputArg1,outputArg2] = smoother_step(za_plot,nsteps,na,no,assim_steps,s5_B_scaling,...
    Bc_ocean,s5_smoother_loops,z_ob,n_cycles_per_smoother,l_integration_coupled_s5,s5_iterations,i_smooth_iteration,...
    n_cycles_per_smoother,Fx,Fy,alph,gamma)
%UNTITLED Summary of this function goes here
%   Detailed explanation goes here
            %% Smoother
            if (assim_scheme == 5)
                za_plot_2 = reshape(permute(za_plot(:,:,1:nsteps),[1,3,2]),[na+no,assim_steps]);
                za_plot_2 = [za_plot_2 za_plot(:,end,end)];
                
                B_smoother = s5_B_scaling * Bc_ocean;
                B_smoother_inv = inv(B_smoother);
                %                                 if l_extra_ob  % Add in extra ob for smoother step
                %                                     for i=1:5
                %                                         if extra_ob_time(i) > 0
                %                                             ob_ix(i,extra_ob_time(i)) = 1;
                %                                         end
                %                                     end
                %                                 end
                
                for i_count_smoother = 1:s5_smoother_loops
                    if i_count_smoother == 1
                        z_lin = za_plot_2;
                    else
                        z_lin = za2_f;
                    end
                    innov_o = z_ob(:,1:nsteps*n_cycles_per_smoother) - H*z_lin(:,2:nsteps*n_cycles_per_smoother+1);
                    dX0_o=zeros(no,1);
                    [dXo_anal2, JXoInner2, dJXoInner2, ito2, rel_grad_o2] = minimize_mod_crit_NKN(dX0_o,'calcfg_ocean_l96c',max_iterations,tolerance,...
                        z_b,innov_o,z_lin,H,Boinv,Roinv,nsteps*n_cycles_per_smoother,h,na,no,Fx,Fy,alph,gamma,ob_ix);
                    %                         assim_scheme,h,nsteps*n_cycles_per_smoother,beta,rho,sigma, ...
                    %                         Omega,k,w_star,coupling_freq, z_b, B_smoother_inv, z_lin, 0, innov_o, var_ob5, ob_ix, l_fgat_s5);
                    if l_integration_coupled_s5 && i_smooth_iteration == s5_iterations && i_count_smoother == s5_smoother_loops
                        X_anal2 = z_lin(:,1) + [zeros(na,1);dXo_anal2];
                        X_temp = X_anal2;
                        for icycles = 1:n_cycles_per_smoother
                            za2_f_icycles = l96c_rk2(X_temp,h,nsteps,na,no,Fx,Fy,alph,gamma);
                            za2_f(na+1:na+no,(icycles-1)*nsteps+1:icycles*nsteps) = za2_f_icycles(na+1:end,1:nsteps);
                            if icycles == n_cycles_per_smoother
                                za2_f(na+1:na+no,end) = za2_f_icycles(na+1:na+no,nsteps+1);
                                za2_f(1:na,:) = za_plot_2(1:na,:);
                            end
                            X_temp(1:na) = za_plot_2(1:na,icycles*nsteps+1); %
                            X_temp(na+1:na+no) = za2_f(na+1:na+no,nsteps+1);
                        end
                    else
                        X_anal2 = z_lin(:,1) + [zeros(na,1);dXo_anal2];
                        [ya2_f] = l96c_rk2_ocean(za_plot_2(1:na,1:end-1),X_anal2(na+1:end),...
                            h,nsteps*n_cycles_per_smoother,no,Fy,alph,gamma);
                        za2_f(1:na,:)=za_plot_2(1:na,:);
                        za2_f(na+1:na+no,:)=ya2_f;
                    end
                end
            end
            % za2_f is the guess trajectory for the next iteration
            % (i_smooth_iteration), and is the final analysis if this
            % is the last iteration
            
            if l_lin_s5 == 0
                Bg_err_smoother((i_ob_pattern_repeats-1) * ...
                    ob_pattern_repeat_freq + i_part_of_ob_pattern, :, :) = za_plot_2(na+1:end,:) - z(na+1:end,:);
            end
            
            %                 if fcsteps > 0
            %                     [x_fc,y_fc,z_fc,w_fc,v_fc] = molteni_rk2(h,fcsteps,beta,rho,sigma,alpha, ...
            %                         Omega,k,w_star,za2_f(1,end),za2_f(2,end),za2_f(3,end),za2_f(4,end),za2_f(5,end),coupling_freq);
            %                     ua2_fc = [x_fc y_fc z_fc w_fc v_fc]';
            %                     za2_f = [za2_f ua2_fc(:,2:end)];
            %                 end
    
end

